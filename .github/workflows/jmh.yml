name: Jmh

on:
  push:
    branches:
      - master
      - 'releases/*'
  pull_request:
    branches:
      - '*'

env:
  MAVEN_ARGS: >-
    --file pom.xml --show-version --batch-mode --errors --lax-checksums -DskipTests=true

jobs:
  linux:
    name: 'Linux (JDK 8)'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v2
        with:
          # Disabling shallow clone for improving relevancy of SonarQube reporting
          fetch-depth: 0

      - name: Prepare git
        run: |
          git config --global core.autocrlf false
          git config --global core.ignorecase false
          git config --global help.autocorrect 1
          git config --global core.fileMode false

      - name: 'Set up JDK 8'
        uses: actions/setup-java@v2.2.0
        with:
          java-version: 8

      - name: 'Make Maven Wrapper executable'
        if: contains(matrix.os, 'win') == false
        run: |
          chmod +x ./mvnw

      - name: 'Build with Maven'
        timeout-minutes: 20
        shell: bash
        run: |
          ./mvnw clean install $MAVEN_ARGS -P"test-jar","dev"

  benchmark:
    needs: linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mapper: [ BeanMapper, BeanUtilsMapper, Bull, Converter, Datus, Dozer, MapStruct, ModelMapper, Orika, ReMap, Selma ]
    name: ${{ matrix.mapper }} Benchmark
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v2
        with:
          # Disabling shallow clone for improving relevancy of SonarQube reporting
          fetch-depth: 0

      - name: Prepare git
        run: |
          git config --global core.autocrlf false
          git config --global core.ignorecase false
          git config --global help.autocorrect 1
          git config --global core.fileMode false

      - name: 'Set up JDK 11'
        uses: actions/setup-java@v2.2.0
        with:
          java-version: 11

      - name: 'Make Maven Wrapper executable'
        if: contains(matrix.os, 'win') == false
        run: |
          chmod +x ./mvnw

      - name: 'Build with Maven'
        timeout-minutes: 20
        shell: bash
        run: |
          ./mvnw clean install $MAVEN_ARGS -P"test-jar","dev"

      - name: 'Benchmark'
        timeout-minutes: 60
        shell: bash
        run: java -jar ./modules/objectmappers-benchmarks/.build/bin/io.nullables.api.playground.objectmappers.benchmarks/benchmarks.jar -p type=${{ matrix.mapper }} -rff results_${{ matrix.mapper }}.csv -rf csv

      - name: 'Upload Benchmark Results'
        uses: actions/upload-artifact@master
        with:
          name: benchmark_results
          path: results_${{ matrix.mapper }}.csv

  collect_benchmark:
    name: 'Collect benchmarks'
    needs: benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v2
        with:
          # Disabling shallow clone for improving relevancy of SonarQube reporting
          fetch-depth: 0

      - name: Prepare git
        run: |
          git config --global core.autocrlf false
          git config --global core.ignorecase false
          git config --global help.autocorrect 1
          git config --global core.fileMode false

      - name: 'Download benchmarks'
        uses: actions/download-artifact@master
        with:
          name: benchmark_results

      - name: 'Prepare CSV Results'
        shell: bash
        run: |
          head -1 results_Converter.csv > results.csv
          for mapper in BeanMapper BeanUtilsMapper Bull Converter Datus Dozer MapStruct ModelMapper Orika ReMap Selma; do sed 1d results_${mapper}.csv >> results.csv; done
          less results.csv

      - name: 'Upload CSV Results'
        uses: actions/upload-artifact@master
        with:
          name: results
          path: results.csv

      - name: 'Install gnuplot'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install gnuplot

      - name: 'Plot Results'
        shell: bash
        run: |
          gnuplot -c ./.github/graph/benchmark.plt

      - name: 'Upload Plot'
        uses: actions/upload-artifact@master
        with:
          name: results
          path: results.png
