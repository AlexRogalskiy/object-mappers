name: Build

on:
  repository_dispatch:
    types: update-event
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  LANG: "en_US.UTF-8"
  LC_MESSAGES: "en_US.UTF-8"
  LC_ALL: "en_US.UTF-8"
  LANGUAGE: "en_US:en"
  JAVA_HOME: ${{ github.workspace }}/jdk
  MAVEN_ARGS: >-
    --file pom.xml --show-version --batch-mode --errors --lax-checksums -DskipTests=true

jobs:
  setup:
    name: Cancel previous builds
    runs-on: ubuntu-latest
    steps:
      #      - name: Wait FaunaDB init
      #        run: |
      #          while ! $(curl --output /dev/null --silent --fail --max-time 1 http://core:8443/ping); do sleep 1; done
      - name: Stop old builds
        if: github.ref != 'refs/heads/master'
        uses: styfle/cancel-workflow-action@0.4.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

  cli-args:
    name: Cmd arguments
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # Disabling shallow clone for improving relevancy of SonarQube reporting
          fetch-depth: 0

      - name: Validate arguments
        uses: ./.github/workflows/args
        env:
          TEST_NAME: "Mona"

  commit-check:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        java: [ '8' ]
        architecture: [ 'x64', 'x86' ]
        os: [ ubuntu-latest, windows-latest ]
        machines: [ 1, 2 ]
        include:
          - java: 11
            architecture: x86
            os: macos-latest
            machines: 1

    name: Commit Check with JDK ${{ matrix.java }} on ${{ matrix.architecture }} with ${{ matrix.os }} on ${{ matrix.machine }}
    steps:
      - name: commit check
        uses: gsactions/commit-message-checker@v1
        with:
          pattern: |
            ^(.*):\s*(.*)$
          error: 'Commit must begin with <scope>: <subject>'
          flags: 'gm'
          excludeTitle: true
          excludeDescription: true
          checkAllCommitMessages: true
          accessToken: ${{ secrets.GITHUB_TOKEN }}

  non_module_java:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        java: [ '8' ]
        architecture: [ 'x64', 'x86' ]
        os: [ ubuntu-latest, windows-latest ]
    name: Build with JDK ${{ matrix.java }} on ${{ matrix.architecture }} with ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 2

      - name: Prepare git
        run: |
          git config --global core.autocrlf false
          git config --global core.ignorecase false
          git config --global help.autocorrect 1
          git config --global core.fileMode false

      - name: Prepare repository
        run: git fetch --unshallow --tags

      # install a specific version of Node using
      # https://github.com/actions/setup-node
      - name: Use Node.js v12
        uses: actions/setup-node@v1
        with:
          node-version: 12

      # just so we learn about available environment variables GitHub provides
      - name: Print env variables
        run: |
          npm i -g @bahmutov/print-env
          print-env GITHUB

      #      - name: Get current git tag
      #        id: get_tag
      #        uses: keeweb/get-tag@v2
      #        with:
      #          tagRegex: "^v(\\d+\\.\\d+\\.\\d+)$"
      #          tagRegexGroup: 1

      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v3.4.1
        with:
          java-package: jdk
          java-version: ${{ matrix.java }}
          architecture: ${{ matrix.architecture }}

      - name: Confirm Java Version
        shell: bash
        run: javac -version

      - name: Cache Maven repository
        uses: actions/cache@v2.1.3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-${{ matrix.java }}-maven-${{ hashFiles('**/*pom*.xml') }}
          restore-keys: ${{ runner.os }}-${{ matrix.java }}-maven-

      - name: Build with Maven
        timeout-minutes: 20
        if: contains(matrix.os, 'win') == false
        run: |
          chmod +x ./mvnw
          ./mvnw clean package $MAVEN_ARGS -P"test-jar","dev"

      - name: Build with Maven
        timeout-minutes: 20
        if: contains(matrix.os, 'win') == true
        run: |
          ./mvnw clean package %MAVEN_ARGS% -P"test-jar","dev"

  module_java:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        java: [ '11', '12', '13', '14', '15-ea', '16-ea' ]
        architecture: [ 'x64', 'x86' ]
        os: [ ubuntu-latest, windows-latest ]
    name: Build with JDK ${{ matrix.java }} on ${{ matrix.architecture }} with ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 2

      - name: Prepare git
        run: |
          git config --global core.autocrlf false
          git config --global core.ignorecase false
          git config --global help.autocorrect 1
          git config --global core.fileMode false

      - name: Prepare repository
        run: git fetch --unshallow --tags

      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v3.4.1
        with:
          java-package: jdk
          java-version: ${{ matrix.java }}
          architecture: ${{ matrix.architecture }}

      - name: Confirm Java Version
        shell: bash
        run: javac -version

      - name: Cache Maven repository
        uses: actions/cache@v2.1.3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-${{ matrix.java }}-maven-${{ hashFiles('**/*pom*.xml') }}
          restore-keys: ${{ runner.os }}-${{ matrix.java }}-maven-

      - name: Build with Maven
        timeout-minutes: 20
        if: contains(matrix.os, 'win') == false
        run: |
          $JAVA_HOME/bin/java -version
          chmod +x ./mvnw
          ./mvnw clean package $MAVEN_ARGS -P"test-jar","dev"

      - name: Build with Maven
        timeout-minutes: 20
        if: contains(matrix.os, 'win') == true
        run: |
          ./mvnw clean package %MAVEN_ARGS% -P"test-jar","dev"

  earlyaccess:
    name: 'Early Access'
    if: github.event_name == 'push' && github.repository == 'moditect/layrry' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 15
        uses: actions/setup-java@v3.4.1
        with:
          java-version: 15

      - name: Cache Maven repository
        uses: actions/cache@v2.1.3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-${{ matrix.java }}-maven-${{ hashFiles('**/*pom*.xml') }}
          restore-keys: ${{ runner.os }}-${{ matrix.java }}-maven-

      - name: Build with Maven
        run: |
          ./mvnw clean package $MAVEN_ARGS -P"test-jar","dev"

      - name: 'Release early-access artifacts'
        uses: marvinpinto/action-automatic-releases@latest
        with:
          automatic_release_tag: 'early-access'
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          title: "Early-Access"
          files: |
            ./modules/objectmappers-beancp/.build/bin/io.nullables.playground.objectmappers.beancp/*.jar
            ./modules/objectmappers-beanmapper/.build/bin/io.nullables.playground.objectmappers.beanmapper/*.jar
            ./modules/objectmappers-beanutils/.build/bin/io.nullables.playground.objectmappers.beanutils/*.jar
            ./modules/objectmappers-bull/.build/bin/io.nullables.playground.objectmappers.bull/*.jar
            ./modules/objectmappers-datus/.build/bin/io.nullables.playground.objectmappers.datus/*.jar
            ./modules/objectmappers-doov/.build/bin/io.nullables.playground.objectmappers.doov/*.jar
            ./modules/objectmappers-dozer/.build/bin/io.nullables.playground.objectmappers.dozer/*.jar
            ./modules/objectmappers-jmapper/.build/bin/io.nullables.playground.objectmappers.jmapper/*.jar
            ./modules/objectmappers-mapstruct/.build/bin/io.nullables.playground.objectmappers.mapstruct/*.jar
            ./modules/objectmappers-modelmapper/.build/bin/io.nullables.playground.objectmappers.modelmapper/*.jar
            ./modules/objectmappers-moo/.build/bin/io.nullables.playground.objectmappers.moo/*.jar
            ./modules/objectmappers-nomin/.build/bin/io.nullables.playground.objectmappers.nomin/*.jar
            ./modules/objectmappers-orika/.build/bin/io.nullables.playground.objectmappers.orika/*.jar
            ./modules/objectmappers-remap/.build/bin/io.nullables.playground.objectmappers.remap/*.jar
            ./modules/objectmappers-selma/.build/bin/io.nullables.playground.objectmappers.selma/*.jar
            ./modules/objectmappers-smooks/.build/bin/io.nullables.playground.objectmappers.smooks/*.jar
