language: java

dist: trusty

os:
  - linux

addons:
  apt:
    packages:
      - gdb

git:
  depth: 25
  quiet: true
  submodules: false
  lfs_skip_smudge: true

install: true

services:
  - xvfb

branches:
  only:
    - master
    - develop
    - /^release.*$/
    - "/^v\\d+\\.\\d+\\.\\d+(\\-.*)?$/"

jdk:
  - oraclejdk8
  - openjdk8
  - oraclejdk11
  - openjdk11
  - openjdk12
  - openjdk13
  - openjdk14

env:
  global:
    - MAVEN_OPTS="-Xmx256m"
    - JAVA_OPTS="-Xmx256m"

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update ; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install gnu-tar git-lfs; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then git lfs pull; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then curl -L https://github.com/github/git-lfs/releases/download/v1.2.0/git-lfs-linux-amd64-1.2.0.tar.gz | tar -xz; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then git-lfs-1.2.0/git-lfs pull; fi

before_script:
  - mvn -N io.takari:maven:wrapper -Dmaven=3.6.3
  - sudo chmod +x ./mvnw
  # enable IPv6, see: https://github.com/travis-ci/travis-ci/issues/8361
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
    sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6';
    fi

script:
  - set -e
  - ${JAVA_HOME}/bin/java -version
  - ./mvnw clean package dependency:resolve-plugins --file pom.xml --show-version --batch-mode --errors --lax-checksums -DskipTests=true -P"test-jar","dev"

stages:
  - sonar
  - release
  - snapshot release

jobs:
  include:
    - stage: sonar
      if: (branch = master OR branch =~ /^r[0-9]+\.[0-9]+/) AND type = pull_request
      name: "Sonar: mvn clean verify sonar:sonar"
      script:
        - ./mvnw clean verify sonar:sonar --file pom.xml --errors --batch-mode --lax-checksums -DskipTests=true -P"test-jar","dev" -Dsonar.projectKey=object-mappers-playground -Dsonar.organization=alexrogalskiy-github -Dsonar.host.url=https://sonarcloud.io/ -Dsonar.login=$SONAR_TOKEN -Dsonar.coverage.jacoco.xmlReportPaths=./build/site/jacoco/jacoco.xml

    - stage: release
      if: branch = release AND type IN (push, pull_request) OR tag =~ /^[0-9\.]+$/
      name: "Release: tag on GitHub and deploy to OSSRH"
      jdk: oraclejdk8
      install: true
      script:
        - head_ref=$(git rev-parse HEAD) || travis_terminate 1
        - branch_ref=$(git rev-parse "$TRAVIS_BRANCH") || travis_terminate 1
        - |
          if [[ $head_ref != $branch_ref ]]; then
            echo "HEAD ref ($head_ref) does not match $TRAVIS_BRANCH ref ($branch_ref).  New commits may have been pushed before the build cloned the repo"
          return 0
          fi
        - git checkout $TRAVIS_BRANCH || travis_terminate 1
        - release_version=`./mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec`
        - branch_name="release-${release_version}"

        # prepare current branch for release, create release branch, increment development version on current branch
        - ./mvnw --settings ./.mvn/settings.xml -B -DbranchName=${branch_name} release:branch || travis_terminate 1
        - git checkout $branch_name || travis_terminate 1

        # remove SNAPSHOT version suffix, create a tag in GitHub, increment development version on release branch
        - ./mvnw --settings ./.mvn/settings.xml -B -DpushChanges=true release:prepare || travis_terminate 1

        # check out tag from GitHub, build then deploy to OSSRH
        - echo $GPG_SECRET_KEYS | base64 --decode | gpg --import
        - echo $GPG_OWNERTRUST | base64 --decode | gpg --import-ownertrust
        - ./mvnw --settings ./.mvn/settings.xml -B release:perform || travis_terminate 1

    - stage: snapshot release
      if: branch = develop AND (type IN (push, pull_request) OR tag =~ /^[0-9\.]+$/) AND commit_message !~ /^(prepare release ([0-9\.]+))$/
      name: "Snapshot release"
      jdk: oraclejdk8
      install: true
      before_install:
        - echo $GPG_SECRET_KEYS | base64 --decode | $GPG_EXECUTABLE --import
        - echo $GPG_OWNERTRUST | base64 --decode | $GPG_EXECUTABLE --import-ownertrust
      before_deploy:
        - ./mvnw help:evaluate -N -Dexpression=project.version|grep -v '\['
        - export project_version=$(mvn help:evaluate -N -Dexpression=project.version|grep -v '\[')
      script:
        - ./mvnw clean deploy -DskipTests=true --settings ./.mvn/settings.xml -B -U -Prelease
      deploy:
        provider: releases
        api_key:
          secure: "$GITHUB_TOKEN"
        file:
          - target/sandboni-*.jar
        on:
          repo: AlexRogalskiy/object-mappers-playground
          tags: true

after_success:
  - bash <(curl -s --retry 5 --retry-delay 2 --connect-timeout 2 https://codecov.io/bash) -t $CODECOV_TOKEN
  - ./mvnw clean test -DrepoToken=$COVERALLS_REPO_TOKEN coveralls:report -P test-jar,test,dev

after_failure:
  - cat hs_err*

#deploy:
#  - provider: script
#    script: mvn clean deploy -DskipTests=true -B -U -Prelease
#    skip_cleanup: true
#    on:
#      tags: true
#      jdk: openjdk8
#      branch: master

notifications:
  email:
    recipients:
      - alexander.rogalsky@yandex.ru
    on_success: change
    on_failure: always

cache:
  directories:
    - "$HOME/.m2/repository"
    - "$HOME/.mvn/wrapper/"
